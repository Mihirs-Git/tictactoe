[{"D:\\React\\tictactoe\\src\\components\\HomeComponent.js":"1","D:\\React\\tictactoe\\src\\index.js":"2","C:\\React\\tictactoe\\src\\index.js":"3","C:\\React\\tictactoe\\src\\components\\HomeComponent.js":"4","C:\\React\\tictactoe\\src\\App.js":"5","C:\\React\\tictactoe\\src\\reportWebVitals.js":"6"},{"size":10669,"mtime":1606976649739,"results":"7","hashOfConfig":"8"},{"size":627,"mtime":1606317625159,"results":"9","hashOfConfig":"8"},{"size":627,"mtime":1606317625159,"results":"10","hashOfConfig":"11"},{"size":11062,"mtime":1636310400527,"results":"12","hashOfConfig":"11"},{"size":181,"mtime":1606317989043,"results":"13","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"11"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"1750qh8",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jlzy28",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\tictactoe\\src\\components\\HomeComponent.js",["28","29","30","31"],"import React, { useEffect, useState } from 'react';\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\r\n\r\nfunction Home(props){\r\n\r\n    let [turn, switchTurn] = useState(2);\r\n\r\n    let [value, changeValue] = useState('O');\r\n\r\n    let [grid, setGrid] = useState([' ',' ',' ',' ',' ',' ',' ',' ',' ']);\r\n\r\n    let [gridDisable, setDisable] = useState([false, false, false, false, false, false, false, false, false]);\r\n\r\n    let [score_p1, setScoreP1] = useState(0);\r\n\r\n    let [score_p2, setScoreP2] = useState(0);\r\n\r\n    let [isModalOpen, toggleModal] = useState(false);\r\n\r\n    let [winner, setWinner] = useState(0);\r\n\r\n    let [count, setCounter] = useState(0);\r\n\r\n    let [imgModal, setImage] = useState(\"\");\r\n\r\n    let [result, setResult] = useState(\"\");\r\n\r\n    const setValue = (index) => {\r\n\r\n        \r\n        setCounter(prev => prev + 1);\r\n\r\n        setGrid(prevGrid => {\r\n\r\n            prevGrid[index] = value;\r\n\r\n            return [...prevGrid];\r\n            \r\n        });\r\n\r\n        setDisable(prevState => {\r\n            prevState[index] = true;\r\n            return [...prevState];\r\n        });\r\n\r\n    }\r\n\r\n    const reset = () => {\r\n\r\n        setScoreP1(0);\r\n        setScoreP2(0);\r\n        newGame();\r\n    }\r\n\r\n    const newGame = () => {\r\n\r\n        switchTurn(2);\r\n        changeValue('O');\r\n        setGrid([' ',' ',' ',' ',' ',' ',' ',' ',' ']);\r\n        setDisable([false, false, false, false, false, false, false, false, false]);\r\n        setWinner(0);\r\n        setCounter(0);\r\n        setImage(\"\");\r\n        setResult(\"\");\r\n\r\n    }\r\n\r\n    const closeModal = () => {\r\n\r\n        toggleModal(false);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n       \r\n        // CHECK WINNING STATE - BRUTE FORCE\r\n\r\n            // COLUMN WINNING STATE\r\n        if(grid[0] === grid[3] && grid[3] === grid[6] && grid[0] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {        \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n        else if(grid[1] === grid[4] && grid[4] === grid[7] && grid[1] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {        \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n        else if(grid[2] === grid[5] && grid[5] === grid[8] && grid[2] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {        \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n\r\n            // ROW WINNING STATE\r\n        else if(grid[0] === grid[1] && grid[1] === grid[2] && grid[0] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {        \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n        else if(grid[3] === grid[4] && grid[4] === grid[5] && grid[3] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {        \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n        else if(grid[6] === grid[7] && grid[7] === grid[8] && grid[6] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1)\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");            \r\n            }\r\n            else\r\n            {     \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n\r\n            // DIAGONAL WINNING STATE\r\n        else if(grid[0] === grid[4] && grid[4] === grid[8] && grid[0] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {    \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n        else if(grid[2] === grid[4] && grid[4] === grid[6] && grid[2] !== \" \")\r\n        {\r\n            if(value === 'O')  \r\n            {  \r\n                setScoreP1(prev => prev + 1);\r\n                setWinner(1);\r\n                setResult(\"Player-1 Wins!!!\");\r\n            }\r\n            else\r\n            {    \r\n                setScoreP2(prev => prev + 1);\r\n                setWinner(2);\r\n                setResult(\"Player-2 Wins!!!\");\r\n            }\r\n            setDisable([true, true, true,true, true, true, true,true, true]);\r\n            toggleModal(true);\r\n        }\r\n        else\r\n        {\r\n            if(count === 9)\r\n            {\r\n                setWinner(-1);\r\n                setImage(\"./drawn.jpg\");\r\n                setResult(\"Oops... Game Draw\");\r\n                toggleModal(true);\r\n            }\r\n            else\r\n            {    \r\n                setImage(\"./winner.jpg\");\r\n            }\r\n            \r\n        }\r\n        \r\n        if(turn === 1)\r\n        {\r\n            switchTurn(2);\r\n            changeValue('X');\r\n        }\r\n        else\r\n        {\r\n            switchTurn(1);\r\n            changeValue('O');\r\n        }\r\n        \r\n        \r\n\r\n    }, [grid]);\r\n\r\n    return(\r\n\r\n        <React.Fragment>\r\n\r\n            <div className=\"container\">\r\n\r\n                <h1 className=\"pt-4 pb-4\">Tic Tac Toe</h1>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <button onClick={newGame} className=\"btn btn-success btn-lg fa fa-plus m-5\">{' '}New Game</button>\r\n                        <button onClick={reset} className=\"btn btn-warning btn-lg text-white fa fa-undo m-5\">{' '}Reset Scores</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <p onClick={() => setValue(0)} className=\"btn btn-outline-light btn-lg p-5 gridBox top left\" disabled={gridDisable[0]}>{grid[0]}</p>\r\n                        <p onClick={() => setValue(1)} className=\"btn btn-outline-light btn-lg p-5 gridBox top\" disabled={gridDisable[1]}>{grid[1]}</p>\r\n                        <p onClick={() => setValue(2)} className=\"btn btn-outline-light btn-lg p-5 gridBox top right\" disabled={gridDisable[2]}>{grid[2]}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <button onClick={() => setValue(3)} className=\"btn btn-outline-light btn-lg gridBox middle left\" disabled={gridDisable[3]}>{grid[3]}</button>\r\n                        <button onClick={() => setValue(4)} className=\"btn btn-outline-light btn-lg gridBox middle\" disabled={gridDisable[4]}>{grid[4]}</button>\r\n                        <button onClick={() => setValue(5)} className=\"btn btn-outline-light btn-lg gridBox middle right\" disabled={gridDisable[5]}>{grid[5]}</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <button onClick={() => setValue(6)} className=\"btn btn-outline-light btn-lg gridBox bottom left\" disabled={gridDisable[6]}>{grid[6]}</button>\r\n                        <button onClick={() => setValue(7)} className=\"btn btn-outline-light btn-lg gridBox bottom\" disabled={gridDisable[7]}>{grid[7]}</button>\r\n                        <button onClick={() => setValue(8)} className=\"btn btn-outline-light btn-lg gridBox bottom right\" disabled={gridDisable[8]}>{grid[8]}</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row p-5 text-center\">\r\n                    <div className=\"col-6 score\">\r\n                        <h4> {score_p1} </h4>\r\n                    </div>\r\n                    <div className=\"col-6 score\">\r\n                        <h4> {score_p2} </h4>\r\n                    </div>\r\n                    <div className=\"col-6 players\">\r\n                       <h3> Player 1 - O </h3>\r\n                    </div>\r\n                    <div className=\"col-6 players\">\r\n                        <h3> Player 2 - X </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Modal isOpen={isModalOpen} toggle={closeModal}>\r\n                <ModalBody className=\"text-center\" toggle={closeModal}>\r\n                    <span className=\"fa fa-times float-right closeBtn\" onClick={closeModal}></span>\r\n                    <img className=\"ml-5 mr-5\" src={imgModal} alt=\"Winner\"></img>\r\n                    <p className=\"result\">{result}</p>\r\n                </ModalBody>\r\n            </Modal>\r\n\r\n        </React.Fragment>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Home;","D:\\React\\tictactoe\\src\\index.js",[],"C:\\React\\tictactoe\\src\\index.js",[],"C:\\React\\tictactoe\\src\\components\\HomeComponent.js",[],"C:\\React\\tictactoe\\src\\App.js",[],"C:\\React\\tictactoe\\src\\reportWebVitals.js",[],{"ruleId":"32","severity":1,"message":"33","line":2,"column":28,"nodeType":"34","messageId":"35","endLine":2,"endColumn":39},{"ruleId":"32","severity":1,"message":"36","line":2,"column":41,"nodeType":"34","messageId":"35","endLine":2,"endColumn":52},{"ruleId":"32","severity":1,"message":"37","line":20,"column":10,"nodeType":"34","messageId":"35","endLine":20,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":249,"column":8,"nodeType":"40","endLine":249,"endColumn":14,"suggestions":"41"},"no-unused-vars","'ModalFooter' is defined but never used.","Identifier","unusedVar","'ModalHeader' is defined but never used.","'winner' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'count', 'turn', and 'value'. Either include them or remove the dependency array.","ArrayExpression",["42"],{"desc":"43","fix":"44"},"Update the dependencies array to be: [count, grid, turn, value]",{"range":"45","text":"46"},[7131,7137],"[count, grid, turn, value]"]